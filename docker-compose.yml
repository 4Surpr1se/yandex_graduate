version: '3'
services:

  database:
    image: postgres:16.3
    env_file: 
      - .env
      - admin_panel/app/config/.env

    # only for debug
    #ports:
    #  - "5432:5432"
    volumes:
      - ./pgdata:/var/lib/postgresql/data
      - ./movies_database_dump.sql:/docker-entrypoint-initdb.d/dump.sql
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U app -d movies_database" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always

  backend:
    build: src
    # ports:
    #   - "80:80"
    env_file: 
      - .env
    depends_on:
      - database
    restart: always

  admin_panel:
    build: admin_panel/app
    expose:
      - "8000"
    env_file:
      - admin_panel/app/config/.env
    volumes:
      - staticfiles:/opt/app/staticfiles
    depends_on:
      database:
        condition: service_healthy
      elasticsearch:
        condition: service_started



  redis:
    image: redis:7.4.0
    #ports:
    #  - "6379:6379"
    restart: always

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.6.2
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    # only for debug
    #ports:
    #  - "9200:9200"
    volumes:
      - esdata:/usr/share/elasticsearch/data
    restart: always

  postgres_to_es:
    build: postgres_to_es
    env_file: 
      - .env
    depends_on:
      - database
      - elasticsearch
    volumes:
      - ./state.json:/app/state.json
      - ./logs:/app/logs
    restart: always

  nginx:
    image: nginx
    container_name: nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/site.conf:/etc/nginx/conf.d/site.conf
      - staticfiles:/static/

    depends_on:
      - backend
      - auth_service
      - admin_panel
    ports:
      - "80:80"

  tests:
    build: tests/functional
    env_file:
      - .env
    entrypoint: >
      sh -c "pip install --no-cache-dir -r requirements.txt
      && python3 utils/wait_for_redis.py
      && python3 utils/wait_for_es.py
      && python3 utils/wait_for_auth.py
      && pytest src"
    depends_on:
      - backend
      - elasticsearch
      - redis
      - auth_db
      - auth_redis
      - auth_service

  auth_db:
    image: postgres:16.3
    container_name: auth_postgres
    env_file:
      - auth_service/src/.env
    #ports:
    #  - "5433:5432"
    volumes:
      - ./auth_service/pg_auth_data:/var/lib/postgresql/data
      - ./auth_service/src/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U app -d auth" ]
      interval: 10s
      timeout: 5s
      retries: 5

  auth_redis:
    image: redis:7.4.0
    restart: always

  auth_service:
    build:
      context: .
      dockerfile: auth_service/src/Dockerfile
    container_name: auth_service
    env_file:
      - auth_service/src/.env
    volumes:
      - ./auth_service:/app  
      - ./auth_service/migrations:/app/migrations 
    ports:
      - "8000:8000"
    depends_on:
      auth_db:
        condition: service_healthy

  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "6831:6831/udp"
      - "16686:16686"
    environment:
      - COLLECTOR_ZIPKIN_HTTP_PORT=9411

  kafka-0:
    image: bitnami/kafka:3.4
    ports:
      - "9094:9094"
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka-0:9093,1@kafka-1:9093,2@kafka-2:9093
      - KAFKA_KRAFT_CLUSTER_ID=abcdefghijklmnopqrstuv
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka-0:9092,EXTERNAL://127.0.0.1:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
    volumes:
      - kafka_0_data:/bitnami/kafka

  kafka-1:
    image: bitnami/kafka:3.4
    ports:
      - "9095:9095"
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka-0:9093,1@kafka-1:9093,2@kafka-2:9093
      - KAFKA_KRAFT_CLUSTER_ID=abcdefghijklmnopqrstuv
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9095
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka-1:9092,EXTERNAL://127.0.0.1:9095
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
    volumes:
      - kafka_1_data:/bitnami/kafka

  kafka-2:
    image: bitnami/kafka:3.4
    ports:
      - "9096:9096"
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_NODE_ID=2
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka-0:9093,1@kafka-1:9093,2@kafka-2:9093
      - KAFKA_KRAFT_CLUSTER_ID=abcdefghijklmnopqrstuv
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9096
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka-2:9092,EXTERNAL://127.0.0.1:9096
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
    volumes:
      - kafka_2_data:/bitnami/kafka

  flask-app:
    build: ugc
    ports:
      - "5001:5001"
    volumes:
      - ./ugc:/app
    depends_on:
      - kafka-0
      - kafka-1
      - kafka-2



volumes:
  kafka_0_data:
  kafka_1_data:
  kafka_2_data:
  staticfiles:
  esdata:
    driver: local
